@Library ('Java-Shared-Libraries') _





pipeline {

        parameters{

            choice(name:'action', choices:'create\ndelete', description:'Choose create/delete')
            string(name: 'aws_accout_id', defaultValue: '891082905732', description: 'aws account id')
            string(name: 'region', defaultValue: 'us-east-2', description: 'aws region to push docker image to ECR')
            string(name: 'ecr_reponame', defaultValue: 'murageshk5', description: 'Specify the ECR account name to push docker image to ECR')
            }

        agent any

        stages{

            stage("Git Chekout") {
            when { expression { params.action == 'create' } }
                steps{
                      gitCheckout (
                        branch:"main",
                        url: "https://github.com/murageshk5/Shared_libraries_Java_app.git"
                    )
                }
            }

            stage("Mvn Unit Test") {
            when { expression { params.action == 'create' } }
                steps{
                    script{

                        mvnTest()

                    }
                }
            }

            stage("Mvn Intigration Test") {
            when { expression { params.action == 'create' } }
                steps{
                    script{

                        mvnIntigrationTest()

                    }
                }
            }

            stage("Static code analysis") {
            when { expression { params.action == 'create' } }
                steps{
                    script{

                        def credentialsId = 'sonar-auth'
                        staticCodeAnalysis(credentialsId)

                    }
                }
            }

            stage("SOnar Quality gate status") {
            when { expression { params.action == 'create' } }
                steps{
                    script{

                        def credentialsId = 'sonar-auth'
                        sonarQualityGateStatus(credentialsId)

                    }
                }
            }

            stage("Mvn Build : Maven") {
            when { expression { params.action == 'create' } }
                steps{
                    script{

                        mvnCleanInstall ()

                    }
                }
            }

            stage("Docker image build : ECR") {
            when { expression { params.action == 'create' } }
                steps{
                    script{

                        dockerBuild ("${params.aws_accout_id}", "${params.region}", "${params.ecr_reponame}",)

                    }
                }
            }

            stage("Docker image scan : trivy ") {
            when { expression { params.action == 'create' } }
                steps{
                    script{

                        dockerImageScan ("${params.aws_accout_id}", "${params.region}", "${params.ecr_reponame}",)

                    }
                }
            }

            stage("Docker image push : ECR") {
            when { expression { params.action == 'create' } }
                steps{
                    script{

                        dockerImagePush ("${params.aws_accout_id}", "${params.region}", "${params.ecr_reponame}",)

                    }
                }
            }
            
        }
}